
name: mokkoji dev CI-CD 파이프라인

on:
  push:
    branches: [ "develop" ]

jobs:
  #1. 개발 서버 CI, Build 용
  CI:
    runs-on: ubuntu-22.04
    services:
      mysql:
        image: mysql:8.0
        ports:
          - '3306:3306'
        env:
          MYSQL_DATABASE: mokkoji
          MYSQL_USER: mokkoji
          MYSQL_PASSWORD: mokkoji
          MYSQL_ROOT_PASSWORD: 1234
      redis:
        image: redis:7.2.5
        ports:
          - '6379:6379'

    steps:
      # 1. repository checkout
      - uses: actions/checkout@v4

      # 2. jdk 환경 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: application.properties 설정
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties
          

      # 체크
      - name: MySQL 체크
        run: |
          until nc -z localhost 3306; do
            echo "Waiting for MySQL..."
            sleep 3
          done


      - name: Redis 체크
        run: |
          until nc -z localhost 6379; do
            echo "Waiting for Redis..."
            sleep 3
          done


      # 4. gradle 환경 설치
      - name: Gradle Wrapper 권한 부여
        run: chmod +x gradlew

      # 4-1. 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}

      - name: Gradle 빌드
        run: ./gradlew clean build


      #7. 도커 허브 로그인
      - name: Docker 로그인
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_ACCESS_TOKEN}}

      #8. 도커 이미지 Push
      - name: Docker 이미지 Push
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{secrets.DOCKER_USERNAME}}/server:latest


  CD:
    needs: CI
    runs-on: ubuntu-22.04

    steps:
      - name: 1. Checkout source code
        uses: actions/checkout@v3

      - name: 2.env 파일 전달
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: ".env"
          target: "/home/ubuntu/app/docker"

      - name: 3. docker-compose.yml 전달
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "./docker/docker-compose.yml"
          target: "/home/ubuntu/app"

      - name: 3. EC2에서 docker-compose 실행
        uses: appleboy/ssh-action@master  # SSH를 사용하여 EC2에서 명령 실행
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}  # EC2 퍼블릭 IP
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # docker-compose 명령어 실행
            cd /home/ubuntu/app/docker
            docker compose pull spring
            docker compose up -d spring


